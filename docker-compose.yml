version: '3.8'

services:
  aiogram-bot:
    container_name: bot-container
    image: bot
    stop_signal: SIGINT
    restart: always
    build:
      context: .
      target: final
    volumes:
      - .env:/app/.env
    logging:
      driver: 'json-file'
      options:
        max-size: '50'
        max-file: '4'
    environment: # FIXME костыль
      - LC_ALL=ru_RU.UTF-8
      - LANG=ru_RU.UTF-8
    depends_on:
      - redis
      - postgres
    networks:
      - aiogramnetwork
    links:
      - postgres:postgres

  postgres:
    image: postgres:16.2-alpine3.19
    container_name: postgres-container
    restart: always
    stop_signal: SIGINT
    environment:
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_DB: ${DB_TABLE}
      PGDATA: "/var/lib/postgresql/data/pgdata"
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - aiogramnetwork

  pgadmin:
    image: dpage/pgadmin4:8.8
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@pgadmin.com
      PGADMIN_DEFAULT_PASSWORD: password
      PGADMIN_LISTEN_PORT: 80
    ports:
      - 15432:80
    volumes:
      - pgadmin:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - aiogramnetwork

  redis:
    container_name: redis-container
    image: redis:7.2.4-alpine
    restart: always
    stop_signal: SIGINT
    command: "redis-server"
    healthcheck:
        test: [ "CMD", "redis-cli","ping" ]
    ports:
      - 6379:6379
    volumes:
      - redisdata:/data
    networks:
      - aiogramnetwork

#  test-runner:
#    container_name: test-runner-container
#    build:
#      context: .
#      target: test
#    volumes:
#      - .env:/app/.env
#    environment:
#      - LC_ALL=ru_RU.UTF-8
#      - LANG=ru_RU.UTF-8
#    entrypoint: ["echo", "Test runner container is ready. Use 'docker-compose run test-runner run-tests' to execute tests."]
#    command: ["tail", "-f", "/dev/null"]

networks:
  aiogramnetwork:
    driver: bridge

volumes:
  redisdata:
    driver: local
  pgdata:
    driver: local
  pgadmin:
    driver: local

# TODO Нужно сначала создавать миграции
# Запускаем docker-compose (надо написать в докере, чтобы миграции переносились вместе со всем)
# И затем внутри контейнера мигрируем
