from datetime import datetime, timedelta

from aiogram import Bot, F, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, InlineKeyboardButton, Message
from aiogram.utils.keyboard import InlineKeyboardBuilder
from loguru import logger

from config import TIMEZONE
from database.models.user import User
from database.services.user import delete_user, get_user_by_id, is_registered
from filters.dispatcherFilters import IsPrivate
from handlers.registerHandler import start
from utils.ScheduleParser import scheduleParser

router = Router(name="mainHandler")
router.message.filter(IsPrivate)


# TODO –£–±—Ä–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –µ–≥–æ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
# TODO –£–±—Ä–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä –≤ keyboards


@router.message(F.text, Command("menu"))
async def menu(msg: Message, username: str, state: FSMContext, db) -> None:

    # TODO: —É–±—Ä–∞—Ç—å —ç—Ç–æ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –≤ –º–æ–¥–µ–ª—å User
    async with db.session() as session:
        existUser: bool = await is_registered(session, msg.from_user.id)
    if not existUser:
        from handlers.registerHandler import start

        return await start(msg=msg, state=state, username=username, db=db)

    logger.opt(colors=True).debug(f"[<y>{username}</y>]: Called <b>/menu</b> command")

    keyboard = InlineKeyboardBuilder()
    keyboard.row(InlineKeyboardButton(text="–ù–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="timetable_today"))
    keyboard.row(InlineKeyboardButton(text="–ù–∞ –∑–∞–≤—Ç—Ä–∞", callback_data="timetable_nextday"))
    keyboard.row(InlineKeyboardButton(text="–ù–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é", callback_data="timetable_current_week"))
    keyboard.row(InlineKeyboardButton(text="–ù–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é", callback_data="timetable_next_week"))
    keyboard.row(InlineKeyboardButton(text="–ù–∞–π—Ç–∏ —Å–≤–æ–±–æ–¥–Ω—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é", callback_data="free_audiences"))
    keyboard.row(InlineKeyboardButton(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings"))
    await msg.answer("–ú–µ–Ω—é", reply_markup=keyboard.as_markup())


@router.callback_query(F.data == "menu")
async def menuCallback(callback: CallbackQuery, username: str, state: FSMContext, db) -> None:
    logger.opt(colors=True).debug(f"[<y>{username}</y>]: Called <b>menu</b> callback")

    # TODO: —É–±—Ä–∞—Ç—å —ç—Ç–æ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –≤ –º–æ–¥–µ–ª—å User
    async with db.session() as session:
        async with session.begin():
            existUser: bool = await is_registered(session, callback.from_user.id)
    if not existUser:
        from handlers.registerHandler import start

        await callback.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
        return await start(msg=callback.message, state=state, username=username, db=db)
    keyboard = InlineKeyboardBuilder()
    keyboard.row(InlineKeyboardButton(text="–ù–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="timetable_today"))
    keyboard.row(InlineKeyboardButton(text="–ù–∞ –∑–∞–≤—Ç—Ä–∞", callback_data="timetable_nextday"))
    keyboard.row(InlineKeyboardButton(text="–ù–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é", callback_data="timetable_current_week"))
    keyboard.row(InlineKeyboardButton(text="–ù–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é", callback_data="timetable_next_week"))
    keyboard.row(InlineKeyboardButton(text="–ù–∞–π—Ç–∏ —Å–≤–æ–±–æ–¥–Ω—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é", callback_data="free_audiences"))
    keyboard.row(InlineKeyboardButton(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings"))
    await callback.message.edit_text("–ú–µ–Ω—é", reply_markup=keyboard.as_markup())


# FIXME: —á—Ç–æ —ç—Ç–æ —Ç–∞–∫–æ–µ? üëá (–û—Ç—Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏—Ç—å —ç—Ç—É —Ç–µ–º—É)
@router.callback_query(F.data == "timetable_today")
@router.callback_query(F.data == "timetable_nextday")
@router.callback_query(F.data == "timetable_current_week")
@router.callback_query(F.data == "timetable_next_week")
async def timetableForDay(callback: CallbackQuery, username: str, db) -> None:
    logger.opt(colors=True).debug(f"[<y>{username}</y>]: Called <b>timetable</b> callback")

    # TODO: —É–±—Ä–∞—Ç—å —ç—Ç–æ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –≤ –º–æ–¥–µ–ª—å User
    async with db.session() as session:
        async with session.begin():
            existingUser: User = await get_user_by_id(session, callback.from_user.id)
    if existingUser is None:
        return await callback.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")

    import locale

    locale.setlocale(locale.LC_ALL, "ru_RU.UTF-8")  # FIXME: –∫–æ—Å—Ç—ã–ª—å

    selected_day: datetime = datetime.now(TIMEZONE)
    current_week: str = "–ó–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å" if selected_day.isocalendar().week % 2 == 0 else "–ß–∏—Å–ª–∏—Ç–µ–ª—å"

    if callback.data == "timetable_today":
        pass
    elif callback.data == "timetable_nextday":
        selected_day += timedelta(days=1)
        current_week: str = "–ó–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å" if selected_day.isocalendar().week % 2 == 0 else "–ß–∏—Å–ª–∏—Ç–µ–ª—å"
    elif callback.data == "timetable_current_week":
        start_of_week = selected_day - timedelta(days=selected_day.weekday())
        end_of_week = start_of_week + timedelta(days=6)
        schedule_for_week_str = f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é ({current_week}) —Å {start_of_week.strftime('%d.%m.%Y')} –ø–æ {end_of_week.strftime('%d.%m.%Y')}:\n\n"
        for i in range(7):
            day = start_of_week + timedelta(days=i)
            if i == 6 and day.strftime("%A") == "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ":
                continue
            if i != 0 and day.strftime("%A")[0].isupper():
                schedule_for_week_str += f"{day.strftime('%A')} ({current_week}):\n"
            schedule_for_week_str += (
                scheduleParser.getScheduleForDay(
                    existingUser.course,
                    existingUser.direction,
                    existingUser.profile,
                    existingUser.group,
                    current_week,
                    day.strftime("%A").capitalize(),
                )
                + "\n\n"
            )
        await callback.message.answer(text=schedule_for_week_str.strip())
        return await callback.answer("–í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")

    elif callback.data == "timetable_next_week":
        start_of_week = selected_day - timedelta(days=selected_day.weekday()) + timedelta(weeks=1)
        end_of_week = start_of_week + timedelta(days=6)
        next_week_type = "–ó–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å" if current_week == "–ß–∏—Å–ª–∏—Ç–µ–ª—å" else "–ß–∏—Å–ª–∏—Ç–µ–ª—å"
        schedule_for_week_str = f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é ({next_week_type}) —Å {start_of_week.strftime('%d.%m.%Y')} –ø–æ {end_of_week.strftime('%d.%m.%Y')}:\n\n"
        for i in range(7):
            day = start_of_week + timedelta(days=i)
            if i == 6 and day.strftime("%A") == "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ":
                continue
            if i != 0 and day.strftime("%A")[0].isupper():
                schedule_for_week_str += f"{day.strftime('%A')} ({next_week_type}):\n"
            schedule_for_week_str += (
                scheduleParser.getScheduleForDay(
                    existingUser.course,
                    existingUser.direction,
                    existingUser.profile,
                    existingUser.group,
                    next_week_type,
                    day.strftime("%A").capitalize(),
                )
                + "\n\n"
            )
        await callback.message.answer(text=schedule_for_week_str.strip())
        return await callback.answer("–í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")

    schedule_for_week_str = f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {selected_day.strftime('%A')} ({current_week}):\n\n"
    schedule_for_week_str += (
        scheduleParser.getScheduleForDay(
            existingUser.course,
            existingUser.direction,
            existingUser.profile,
            existingUser.group,
            current_week,
            selected_day.strftime("%A").capitalize(),
        )
        + "\n\n"
    )

    await callback.message.answer(text=schedule_for_week_str.strip())
    await callback.answer("–í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")


@router.callback_query(F.data == "settings")
async def settings(callback: CallbackQuery, username: str, db) -> None:
    logger.opt(colors=True).debug(f"[<y>{username}</y>]: Called <b>settings</b> callback")

    # TODO: —É–±—Ä–∞—Ç—å —ç—Ç–æ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –≤ –º–æ–¥–µ–ª—å User
    async with db.session() as session:
        async with session.begin():
            existUser: bool = await is_registered(session, callback.from_user.id)
    if not existUser:
        return await callback.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
    keyboard = InlineKeyboardBuilder()
    keyboard.row(InlineKeyboardButton(text="–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å", callback_data="feedback"))
    keyboard.row(InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç", callback_data="delete_user"))
    keyboard.row(InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="menu"))
    await callback.message.edit_text("–ù–∞—Å—Ç—Ä–æ–π–∫–∏", reply_markup=keyboard.as_markup())
    return await callback.answer()


@router.callback_query(F.data == "delete_user")
async def deleteUser(callback: CallbackQuery, username: str, state: FSMContext, db, bot: Bot) -> None:
    logger.opt(colors=True).debug(f"[<y>{username}</y>]: Called <b>delete_user</b> callback")
    user_id = callback.from_user.id
    # TODO: —É–±—Ä–∞—Ç—å —ç—Ç–æ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –≤ –º–æ–¥–µ–ª—å User
    async with db.session() as session:
        async with session.begin():
            existUser: bool = await is_registered(session, user_id)
            if not existUser:
                await callback.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
            else:
                await delete_user(session, user_id)
                await callback.answer("–í—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–∏–ª–∏ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç")

    await callback.message.delete()

    return await start(msg=callback.message, state=state, username=username, db=db)
